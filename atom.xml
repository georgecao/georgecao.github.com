<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[George Cao's Blog]]></title>
  <link href="http://georgecao.github.com/atom.xml" rel="self"/>
  <link href="http://georgecao.github.com/"/>
  <updated>2012-09-20T00:01:41-04:00</updated>
  <id>http://georgecao.github.com/</id>
  <author>
    <name><![CDATA[George]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[new-post]]></title>
    <link href="http://georgecao.github.com/blog/2012/09/19/new-post/"/>
    <updated>2012-09-19T23:21:00-04:00</updated>
    <id>http://georgecao.github.com/blog/2012/09/19/new-post</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java网络编程之HttpURLConnection你了解多少？]]></title>
    <link href="http://georgecao.github.com/blog/2012/09/19/javawang-luo-bian-cheng-zhi-httpurlconnectionni-liao-jie-duo-shao-%3F/"/>
    <updated>2012-09-19T23:21:00-04:00</updated>
    <id>http://georgecao.github.com/blog/2012/09/19/javawang-luo-bian-cheng-zhi-httpurlconnectionni-liao-jie-duo-shao-?</id>
    <content type="html"><![CDATA[<p>HttpURLConnection是Java提供用于支持HTTP协议的网络访问，用它访问一个URL的内容很方便。但是最近遇到一个问题，就是用它发送POST请求的时候总是返回502错误：Bad Gateway；但是同样的代码，同样的IDE，同样的JDK，同样的系统环境，用Apache的开源HttpClient发出同样的POST请求却是正常返回200；更诡异的是使用JDK1.6.0-14版本一切正常，返回200，但用JDK1.6.0-20/24的时候却返回了502。起初怀疑JDK出了bug，不过后来事实证明，只要你怀疑一个大的系统出了问题的时候，十有八九问题都是出在自身，只有很少的概率才出现那种状况。
除了怀疑JDK的问题以外，还觉得是HttpURLConnection类使用不当。Google了好久，现在整理一个HttpURLConnection的使用方法如下：</p>

<h3>HTTP POST和GET请求</h3>

<p>对于于http的POST和PUT请求，发出HTTP请求应该遵循的步骤：</p>

<h4>1.生成HttpURLConnection实例，并设置http请求参数或者属性；</h4>

<h4>2.调用getOutputStream方法获得OutputStream并且输出数据到输出流。</h4>

<p>不管你有没有数据需要发送到服务器端，至少你要调用一下getOutputStream()方法之后忽略数据的写入；</p>

<h4>3.调用getInputStream方法发出真实的http请求，并且等待服务器的响应。</h4>

<p>不管你需不需要服务器的反馈，这个必须调用。</p>

<h3>其他请求</h3>

<p>对于http的除了POST和PUT的其他请求（如GET，HEAD，DELETE，TRACE，OPTIONS），发出HTTP请求应该遵循的步骤：</p>

<h4>1.生成HttpURLConnection实例，并设置http请求参数或者属性；</h4>

<h4>2.调用getInputStream方法发出真实的http请求，并且等待服务器的响应。</h4>

<p>我们不能假定调用getOutputStream()获得OutputStream，写入数据，然后调用输出流的flush()/close()方法就把真实的http请求发送到服务器端了。<strong>事实上，调用HttpURLConnection的getInputStream()方法是唯一的发出真实请求的方法，而调用getOutputStream()方法并没有发送真实的Http请求。</strong>
除此之外，使用HttpURLConnection的时候一定要根据请求的类型（POST，GET等）去遵循上面描述的执行顺序，比如说你已经调用共getInputStream()方法了，你在调用getOutputStream()方法的时候就抛异常了，HttpURLConnection说这是不合法的。
我遇到的诡异的问题就是发出POST请求的时候没有调用getOutputStream()方法，省略了POST/PUT请求执行顺序中的第2步导致的。同样的，如果在GET请求中调用的getOutputStream()，JDK的代码显示这个请求就自动变成POST请求了，为了向后兼容的原因也不告诉你，不抛异常。而非POST或PUT请求则直接抛异常了。从代码中也可以看出使用POST或者PUT，或者在GET请求中调用getOutputStream()是一定要设置setDOOutput(true);</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">OutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(!</span><span class="n">doOutput</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ProtocolException</span><span class="o">(</span>
</span><span class='line'>                  <span class="s">&quot;cannot write to a URLConnection&quot;</span> <span class="o">+</span> <span class="s">&quot; if doOutput=false - call setDoOutput(true)&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">method</span> <span class="o">=</span> <span class="s">&quot;POST&quot;</span><span class="o">;</span> <span class="c1">// Backward compatibility</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(!</span><span class="s">&quot;POST&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="s">&quot;PUT&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">method</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="s">&quot;http&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">getProtocol</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ProtocolException</span><span class="o">(</span><span class="s">&quot;HTTP method &quot;</span> <span class="o">+</span> <span class="n">method</span>
</span><span class='line'>                                <span class="o">+</span> <span class="s">&quot; doesn&#39;t support output&quot;</span><span class="o">);</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//.......</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候我们可以看出Java那些个以提高可读性为目的的冗长的方法名，变量名这时候变成了一种误导。还有一个问题就是JDK 1.6.0不同版本之间的行为不一致的问题，原因还是未知。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Http连接中(HttpURLConnection)中使用代理(Proxy)及其验证(Authentication)]]></title>
    <link href="http://georgecao.github.com/blog/2012/09/19/java-httplian-jie-zhong-httpurlconnection-zhong-shi-yong-dai-li-proxy-ji-qi-yan-zheng-authentication/"/>
    <updated>2012-09-19T23:19:00-04:00</updated>
    <id>http://georgecao.github.com/blog/2012/09/19/java-httplian-jie-zhong-httpurlconnection-zhong-shi-yong-dai-li-proxy-ji-qi-yan-zheng-authentication</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打印所有的Oracle HotSpot JVM参数及其默认值(HotSpot JVM Options/Flags)]]></title>
    <link href="http://georgecao.github.com/blog/2012/09/18/da-yin-suo-you-de-oracle-hotspot-jvmcan-shu-ji-qi-mo-ren-zhi-hotspot-jvm-options-slash-flags/"/>
    <updated>2012-09-18T06:32:00-04:00</updated>
    <id>http://georgecao.github.com/blog/2012/09/18/da-yin-suo-you-de-oracle-hotspot-jvmcan-shu-ji-qi-mo-ren-zhi-hotspot-jvm-options-slash-flags</id>
    <content type="html"><![CDATA[<p>Java程序员有时候需要了解JVM相关的参数，不管是出于好奇或者工作需要。Oracle的文档中列出了一些<a href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">点此查看</a>，但并不是全部，而且有些参数的设置会默认启用或者关闭其他一些参数>，而在某些情况下设置某个参数是不会生效的。还有些时候你想让JVM做某些事情，但是你不知道那个参数可以用。下面介绍一些办法用以列出所有参数，这样你在研究或者Google的时候也比较有明确的目标。</p>

<h2>参数查看</h2>

<p>如果你想查看一下线上正在运行的JVM到底设置了那些参数，生效的是那些，可能用到的方法：</p>

<h3>1. 在Linux下用ps命令找到启动Java应用时的参数</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps -ef | grep <span class="s2">&quot;your java app name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会打出你启动Java应用时传给java命令的所有参数，你可以看到里面的JVM参数。</p>

<h3>2. 直接看启动脚本，或者参数配置</h3>

<p>你未必能找到所有设置这JVM参数的地方，容易遗漏。
一般来讲以上两种办法都需要对JVM了如指掌或者非常熟悉，至少对特定的参数。其实JVM中有一个参数<code>-XX:+PrintFlagsFinal</code>，可以打印出几乎所有的JVM支持的参数以及他们的默认值。如果你想要查看你的Java应用到底使用了那些参数，只要在启动的时候加上这个参数就可以了。</p>

<h2>查看你使用的JDK支持的参数</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span> <span class="o">-</span><span class="nl">XX:</span><span class="o">+</span><span class="n">UnlockDiagnosticVMOptions</span> <span class="o">-</span><span class="nl">XX:</span><span class="o">+</span><span class="n">PrintFlagsFinal</span> <span class="o">-</span><span class="n">version</span>
</span></code></pre></td></tr></table></div></figure>


<h3>打印Java应用启用的JVM参数</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span> <span class="o">-</span><span class="nl">XX:</span><span class="o">+</span><span class="n">PrintFlagsFinal</span> <span class="o">-</span><span class="n">classpath</span><span class="o">=/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">libs</span> <span class="n">MainClass</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用jinfo查看具体参数</h3>

<p>如果你的Java应用已经是运行状态了，你想查看某个JVM参数生效没有可以使用jinfo这个工具。比如说大名鼎鼎的<code>G1</code>垃圾回收器，在<strong>JDK7 update 3</strong>中不论是客户端(-client)还是服务器(-server)模式下都不是默认启动的。
<code>jinfo</code>是随JDK一起发布的，使用时先用<code>jps</code>找到Java应用的<strong>pid</strong>。直接运行<code>jinfo</code>可以查看使用说明。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jinfo -flag UseParallelOldGC 31072
</span><span class='line'>-XX:+UseParallelOldGC
</span></code></pre></td></tr></table></div></figure>


<p>JDK中实用的工具还很多，可以逐个的体验一下<code>${JAVA_HOME}/bin</code>目录中的每个命令，有惊喜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready to GO]]></title>
    <link href="http://georgecao.github.com/blog/2012/09/18/ready-to-go/"/>
    <updated>2012-09-18T05:19:00-04:00</updated>
    <id>http://georgecao.github.com/blog/2012/09/18/ready-to-go</id>
    <content type="html"><![CDATA[<p>Ready to Go. I mean it.</p>
]]></content>
  </entry>
  
</feed>
